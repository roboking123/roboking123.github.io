<!DOCTYPE html>
<html lang="zh-TW">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>小說素材庫</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
        }

        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
            color: #333;
        }

        .container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 20px;
        }

        .login-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
        }

        .login-box {
            background: white;
            padding: 40px;
            border-radius: 15px;
            box-shadow: 0 15px 35px rgba(0,0,0,0.1);
            width: 100%;
            max-width: 400px;
        }

        .main-app {
            display: none;
        }

        h1, h2 {
            text-align: center;
            margin-bottom: 30px;
            color: #4a5568;
        }

        .input-group {
            margin-bottom: 20px;
        }

        label {
            display: block;
            margin-bottom: 5px;
            font-weight: 600;
            color: #2d3748;
        }

        input, textarea, select {
            width: 100%;
            padding: 12px;
            border: 2px solid #e2e8f0;
            border-radius: 8px;
            font-size: 16px;
            transition: border-color 0.3s;
        }

        input:focus, textarea:focus, select:focus {
            outline: none;
            border-color: #667eea;
        }

        textarea {
            resize: vertical;
            min-height: 120px;
        }

        .btn {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
            padding: 12px 24px;
            border: none;
            border-radius: 8px;
            cursor: pointer;
            font-size: 16px;
            font-weight: 600;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .btn:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
        }

        .btn-secondary {
            background: #718096;
        }

        .btn-danger {
            background: #e53e3e;
        }

        .btn-small {
            padding: 8px 16px;
            font-size: 14px;
        }

        .header {
            background: white;
            padding: 20px;
            border-radius: 15px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
            display: flex;
            justify-content: space-between;
            align-items: center;
        }

        .nav-tabs {
            display: flex;
            background: white;
            border-radius: 15px;
            padding: 10px;
            margin-bottom: 30px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .nav-tab {
            flex: 1;
            padding: 15px;
            text-align: center;
            cursor: pointer;
            border-radius: 10px;
            transition: background-color 0.3s;
            font-weight: 600;
        }

        .nav-tab.active {
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            color: white;
        }

        .nav-tab:hover:not(.active) {
            background: #f7fafc;
        }

        .content-section {
            display: none;
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 5px 15px rgba(0,0,0,0.1);
        }

        .content-section.active {
            display: block;
        }

        .search-bar {
            margin-bottom: 20px;
        }

        .items-grid {
            display: grid;
            gap: 20px;
            margin-top: 20px;
        }

        .item-card {
            background: #f7fafc;
            border: 1px solid #e2e8f0;
            border-radius: 10px;
            padding: 20px;
            transition: transform 0.2s, box-shadow 0.2s;
        }

        .item-card:hover {
            transform: translateY(-2px);
            box-shadow: 0 8px 25px rgba(0,0,0,0.1);
        }

        .item-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 15px;
        }

        .item-title {
            font-size: 18px;
            font-weight: 600;
            color: #2d3748;
        }

        .item-actions {
            display: flex;
            gap: 10px;
        }

        .item-content {
            color: #4a5568;
            line-height: 1.6;
        }

        .item-meta {
            font-size: 12px;
            color: #718096;
            margin-top: 10px;
        }

        .modal {
            display: none;
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background: rgba(0,0,0,0.5);
            z-index: 1000;
        }

        .modal-content {
            background: white;
            margin: 5% auto;
            padding: 30px;
            border-radius: 15px;
            width: 90%;
            max-width: 600px;
            max-height: 80vh;
            overflow-y: auto;
        }

        .modal-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 20px;
        }

        .close {
            font-size: 28px;
            font-weight: bold;
            cursor: pointer;
            color: #718096;
        }

        .close:hover {
            color: #e53e3e;
        }

        .form-actions {
            display: flex;
            gap: 10px;
            justify-content: flex-end;
            margin-top: 20px;
        }

        @media (max-width: 768px) {
            .container {
                padding: 10px;
            }
            
            .header {
                flex-direction: column;
                gap: 15px;
            }
            
            .nav-tabs {
                flex-direction: column;
            }
            
            .item-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
            }
        }

        .secret-warning {
            background: #fed7e2;
            color: #97266d;
            padding: 10px;
            border-radius: 8px;
            margin-bottom: 15px;
            font-weight: 600;
        }

        .export-section {
            margin-top: 30px;
            padding: 20px;
            background: #f7fafc;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <!-- 登入頁面 -->
    <div id="loginContainer" class="login-container">
        <div class="login-box">
            <h1>🔒 小說素材庫</h1>
            <div class="input-group">
                <label for="password">請輸入密碼：</label>
                <input type="password" id="password" placeholder="密碼">
            </div>
            <button class="btn" onclick="login()" style="width: 100%;">登入</button>
        </div>
    </div>

    <!-- 主應用程式 -->
    <div id="mainApp" class="main-app">
        <div class="container">
            <div class="header">
                <h1>📚 小說素材庫</h1>
                <button class="btn btn-secondary" onclick="logout()">登出</button>
            </div>

            <div class="nav-tabs">
                <div class="nav-tab active" onclick="switchTab('characters')">角色設定</div>
                <div class="nav-tab" onclick="switchTab('backgrounds')">故事背景</div>
                <div class="nav-tab" onclick="switchTab('secrets')">秘密設定</div>
                <div class="nav-tab" onclick="switchTab('novels')">AI小說</div>
            </div>

            <!-- 角色設定 -->
            <div id="characters" class="content-section active">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2>👤 角色設定</h2>
                    <button class="btn" onclick="openModal('characterModal')">新增角色</button>
                </div>
                <div class="search-bar">
                    <input type="text" id="characterSearch" placeholder="搜尋角色..." onkeyup="searchItems('characters')">
                </div>
                <div id="charactersList" class="items-grid"></div>
            </div>

            <!-- 故事背景 -->
            <div id="backgrounds" class="content-section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2>🌍 故事背景</h2>
                    <button class="btn" onclick="openModal('backgroundModal')">新增背景</button>
                </div>
                <div class="search-bar">
                    <input type="text" id="backgroundSearch" placeholder="搜尋背景..." onkeyup="searchItems('backgrounds')">
                </div>
                <div id="backgroundsList" class="items-grid"></div>
            </div>

            <!-- 秘密設定 -->
            <div id="secrets" class="content-section">
                <div class="secret-warning">
                    ⚠️ 注意：此區域包含劇透和敏感設定，請謹慎分享
                </div>
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2>🔐 秘密設定</h2>
                    <button class="btn" onclick="openModal('secretModal')">新增秘密</button>
                </div>
                <div class="search-bar">
                    <input type="text" id="secretSearch" placeholder="搜尋秘密設定..." onkeyup="searchItems('secrets')">
                </div>
                <div id="secretsList" class="items-grid"></div>
            </div>

            <!-- AI小說 -->
            <div id="novels" class="content-section">
                <div style="display: flex; justify-content: space-between; align-items: center; margin-bottom: 20px;">
                    <h2>📖 AI小說</h2>
                    <button class="btn" onclick="openModal('novelModal')">新增小說</button>
                </div>
                <div class="search-bar">
                    <input type="text" id="novelSearch" placeholder="搜尋小說..." onkeyup="searchItems('novels')">
                </div>
                <div id="novelsList" class="items-grid"></div>

                <div class="export-section">
                    <h3>📤 匯出功能</h3>
                    <p>將所有資料匯出給AI使用：</p>
                    <div style="margin-top: 15px;">
                        <button class="btn btn-secondary" onclick="exportForAI()">匯出給AI</button>
                        <button class="btn btn-secondary" onclick="exportAll()">匯出所有資料</button>
                    </div>
                </div>
            </div>
        </div>
    </div>

    <!-- 模態視窗 -->
    <!-- 角色模態 -->
    <div id="characterModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="characterModalTitle">新增角色</h3>
                <span class="close" onclick="closeModal('characterModal')">&times;</span>
            </div>
            <form id="characterForm">
                <div class="input-group">
                    <label for="characterName">角色名稱：</label>
                    <input type="text" id="characterName" required>
                </div>
                <div class="input-group">
                    <label for="characterAge">年齡：</label>
                    <input type="text" id="characterAge">
                </div>
                <div class="input-group">
                    <label for="characterAppearance">外貌描述：</label>
                    <textarea id="characterAppearance"></textarea>
                </div>
                <div class="input-group">
                    <label for="characterPersonality">性格特質：</label>
                    <textarea id="characterPersonality"></textarea>
                </div>
                <div class="input-group">
                    <label for="characterBackground">背景故事：</label>
                    <textarea id="characterBackground"></textarea>
                </div>
                <div class="input-group">
                    <label for="characterNotes">額外備註：</label>
                    <textarea id="characterNotes"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('characterModal')">取消</button>
                    <button type="submit" class="btn">儲存</button>
                </div>
            </form>
        </div>
    </div>

    <!-- 背景模態 -->
    <div id="backgroundModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="backgroundModalTitle">新增故事背景</h3>
                <span class="close" onclick="closeModal('backgroundModal')">&times;</span>
            </div>
            <form id="backgroundForm">
                <div class="input-group">
                    <label for="backgroundName">場景名稱：</label>
                    <input type="text" id="backgroundName" required>
                </div>
                <div class="input-group">
                    <label for="backgroundType">類型：</label>
                    <select id="backgroundType">
                        <option value="地點">地點</option>
                        <option value="時代">時代</option>
                        <option value="世界觀">世界觀</option>
                        <option value="文化">文化</option>
                        <option value="其他">其他</option>
                    </select>
                </div>
                <div class="input-group">
                    <label for="backgroundDescription">詳細描述：</label>
                    <textarea id="backgroundDescription"></textarea>
                </div>
                <div class="input-group">
                    <label for="backgroundRules">規則/法則：</label>
                    <textarea id="backgroundRules"></textarea>
                </div>
                <div class="input-group">
                    <label for="backgroundNotes">備註：</label>
                    <textarea id="backgroundNotes"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('backgroundModal')">取消</button>
                    <button type="submit" class="btn">儲存</button>
                </div>
            </form>
        </div>
    </div>

    <!-- 秘密設定模態 -->
    <div id="secretModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="secretModalTitle">新增秘密設定</h3>
                <span class="close" onclick="closeModal('secretModal')">&times;</span>
            </div>
            <form id="secretForm">
                <div class="input-group">
                    <label for="secretTitle">標題：</label>
                    <input type="text" id="secretTitle" required>
                </div>
                <div class="input-group">
                    <label for="secretCategory">類別：</label>
                    <select id="secretCategory">
                        <option value="劇情轉折">劇情轉折</option>
                        <option value="角色秘密">角色秘密</option>
                        <option value="世界設定">世界設定</option>
                        <option value="伏筆">伏筆</option>
                        <option value="結局">結局</option>
                        <option value="其他">其他</option>
                    </select>
                </div>
                <div class="input-group">
                    <label for="secretContent">內容：</label>
                    <textarea id="secretContent"></textarea>
                </div>
                <div class="input-group">
                    <label for="secretImpact">影響/重要性：</label>
                    <textarea id="secretImpact"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('secretModal')">取消</button>
                    <button type="submit" class="btn">儲存</button>
                </div>
            </form>
        </div>
    </div>

    <!-- 小說模態 -->
    <div id="novelModal" class="modal">
        <div class="modal-content">
            <div class="modal-header">
                <h3 id="novelModalTitle">新增小說</h3>
                <span class="close" onclick="closeModal('novelModal')">&times;</span>
            </div>
            <form id="novelForm">
                <div class="input-group">
                    <label for="novelTitle">標題：</label>
                    <input type="text" id="novelTitle" required>
                </div>
                <div class="input-group">
                    <label for="novelPrompt">使用的提示詞：</label>
                    <textarea id="novelPrompt"></textarea>
                </div>
                <div class="input-group">
                    <label for="novelContent">小說內容：</label>
                    <textarea id="novelContent" style="min-height: 200px;"></textarea>
                </div>
                <div class="input-group">
                    <label for="novelNotes">備註/評價：</label>
                    <textarea id="novelNotes"></textarea>
                </div>
                <div class="form-actions">
                    <button type="button" class="btn btn-secondary" onclick="closeModal('novelModal')">取消</button>
                    <button type="submit" class="btn">儲存</button>
                </div>
            </form>
        </div>
    </div>

    <script>
        // 資料儲存
        let data = {
            characters: [],
            backgrounds: [],
            secrets: [],
            novels: []
        };

        let editingId = null;
        let currentEditType = null;

        // 預設密碼（你可以修改）
        const PASSWORD = "mynovel123";

        // 初始化
        function init() {
            loadData();
            renderAll();
        }

        // 登入功能
        function login() {
            const password = document.getElementById('password').value;
            if (password === PASSWORD) {
                document.getElementById('loginContainer').style.display = 'none';
                document.getElementById('mainApp').style.display = 'block';
                init();
            } else {
                alert('密碼錯誤！');
            }
        }

        function logout() {
            document.getElementById('loginContainer').style.display = 'flex';
            document.getElementById('mainApp').style.display = 'none';
            document.getElementById('password').value = '';
        }

        // 資料載入和儲存
        function loadData() {
            try {
                const saved = localStorage.getItem('novelMaterials');
                if (saved) {
                    data = JSON.parse(saved);
                }
            } catch (e) {
                console.log('載入資料時發生錯誤，使用預設資料');
            }
        }

        function saveData() {
            try {
                localStorage.setItem('novelMaterials', JSON.stringify(data));
            } catch (e) {
                alert('儲存失敗，請檢查瀏覽器設定');
            }
        }

        // 分頁切換
        function switchTab(tab) {
            // 移除所有active class
            document.querySelectorAll('.nav-tab').forEach(t => t.classList.remove('active'));
            document.querySelectorAll('.content-section').forEach(s => s.classList.remove('active'));
            
            // 添加active class
            event.target.classList.add('active');
            document.getElementById(tab).classList.add('active');
        }

        // 模態視窗
        function openModal(modalId, editId = null) {
            editingId = editId;
            currentEditType = modalId.replace('Modal', '').slice(0, -1); // 移除Modal和複數s
            
            document.getElementById(modalId).style.display = 'block';
            
            if (editId) {
                fillEditForm(modalId, editId);
            } else {
                clearForm(modalId);
            }
        }

        function closeModal(modalId) {
            document.getElementById(modalId).style.display = 'none';
            editingId = null;
            currentEditType = null;
        }

        function clearForm(modalId) {
            const form = document.querySelector(`#${modalId} form`);
            form.reset();
            
            // 更新標題
            const titleMap = {
                'characterModal': '新增角色',
                'backgroundModal': '新增故事背景',
                'secretModal': '新增秘密設定',
                'novelModal': '新增小說'
            };
            document.querySelector(`#${modalId} h3`).textContent = titleMap[modalId];
        }

        function fillEditForm(modalId, editId) {
            const type = modalId.replace('Modal', '').slice(0, -1);
            const item = data[type + 's'].find(i => i.id === editId);
            
            if (!item) return;
            
            // 更新標題
            const titleMap = {
                'characterModal': '編輯角色',
                'backgroundModal': '編輯故事背景',
                'secretModal': '編輯秘密設定',
                'novelModal': '編輯小說'
            };
            document.querySelector(`#${modalId} h3`).textContent = titleMap[modalId];
            
            // 填入資料
            switch(type) {
                case 'character':
                    document.getElementById('characterName').value = item.name || '';
                    document.getElementById('characterAge').value = item.age || '';
                    document.getElementById('characterAppearance').value = item.appearance || '';
                    document.getElementById('characterPersonality').value = item.personality || '';
                    document.getElementById('characterBackground').value = item.background || '';
                    document.getElementById('characterNotes').value = item.notes || '';
                    break;
                case 'background':
                    document.getElementById('backgroundName').value = item.name || '';
                    document.getElementById('backgroundType').value = item.type || '';
                    document.getElementById('backgroundDescription').value = item.description || '';
                    document.getElementById('backgroundRules').value = item.rules || '';
                    document.getElementById('backgroundNotes').value = item.notes || '';
                    break;
                case 'secret':
                    document.getElementById('secretTitle').value = item.title || '';
                    document.getElementById('secretCategory').value = item.category || '';
                    document.getElementById('secretContent').value = item.content || '';
                    document.getElementById('secretImpact').value = item.impact || '';
                    break;
                case 'novel':
                    document.getElementById('novelTitle').value = item.title || '';
                    document.getElementById('novelPrompt').value = item.prompt || '';
                    document.getElementById('novelContent').value = item.content || '';
                    document.getElementById('novelNotes').value = item.notes || '';
                    break;
            }
        }

        // 表單提交
        document.getElementById('characterForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveCharacter();
        });

        document.getElementById('backgroundForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveBackground();
        });

        document.getElementById('secretForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveSecret();
        });

        document.getElementById('novelForm').addEventListener('submit', function(e) {
            e.preventDefault();
            saveNovel();
        });

        function saveCharacter() {
            const character = {
                id: editingId || Date.now(),
                name: document.getElementById('characterName').value,
                age: document.getElementById('characterAge').value,
                appearance: document.getElementById('characterAppearance').value,
                personality: document.getElementById('characterPersonality').value,
                background: document.getElementById('characterBackground').value,
                notes: document.getElementById('characterNotes').value,
                createdAt: editingId ? data.characters.find(c => c.id === editingId).createdAt : new Date().toLocaleString(),
                updatedAt: new Date().toLocaleString()
            };

            if (editingId) {
                const index = data.characters.findIndex(c => c.id === editingId);
                data.characters[index] = character;
            } else {
                data.characters.push(character);
            }

            saveData();
            renderCharacters();
            closeModal('characterModal');
        }

        function saveBackground() {
            const background = {
                id: editingId || Date.now(),
                name: document.getElementById('backgroundName').value,
                type: document.getElementById('backgroundType').value,
                description: document.getElementById('backgroundDescription').value,
                rules: document.getElementById('backgroundRules').value,
                notes: document.getElementById('backgroundNotes').value,
                createdAt: editingId ? data.backgrounds.find(b => b.id === editingId).createdAt : new Date().toLocaleString(),
                updatedAt: new Date().toLocaleString()
            };

            if (editingId) {
                const index = data.backgrounds.findIndex(b => b.id === editingId);
                data.backgrounds[index] = background;
            } else {
                data.backgrounds.push(background);
            }

            saveData();
            renderBackgrounds();
            closeModal('backgroundModal');
        }

        function saveSecret() {
            const secret = {
                id: editingId || Date.now(),
                title: document.getElementById('secretTitle').value,
                category: document.getElementById('secretCategory').value,
                content: document.getElementById('secretContent').value,
                impact: document.getElementById('secretImpact').value,
                createdAt: editingId ? data.secrets.find(s => s.id === editingId).createdAt : new Date().toLocaleString(),
                updatedAt: new Date().toLocaleString()
            };

            if (editingId) {
                const index = data.secrets.findIndex(s => s.id === editingId);
                data.secrets[index] = secret;
            } else {
                data.secrets.push(secret);
            }

            saveData();
            renderSecrets();
            closeModal('secretModal');
        }

        function saveNovel() {
            const novel = {
                id: editingId || Date.now(),
                title: document.getElementById('novelTitle').value,
                prompt: document.getElementById('novelPrompt').value,
                content: document.getElementById('novelContent').value,
                notes: document.getElementById('novelNotes').value,
                createdAt: editingId ? data.novels.find(n => n.id === editingId).createdAt : new Date().toLocaleString(),
                updatedAt: new Date().toLocaleString()
            };

            if (editingId) {
                const index = data.novels.findIndex(n => n.id === editingId);
                data.novels[index] = novel;
            } else {
                data.novels.push(novel);
            }

            saveData();
            renderNovels();
            closeModal('novelModal');
        }

        // 刪除功能
        function deleteItem(type, id) {
            if (confirm('確定要刪除嗎？此操作無法撤銷。')) {
                const index = data[type].findIndex(item => item.id === id);
                if (index > -1) {
                    data[type].splice(index, 1);
                    saveData();
                    renderAll();
                }
            }
        }

        // 渲染功能
        function renderAll() {
            renderCharacters();
            renderBackgrounds();
            renderSecrets();
            renderNovels();
        }

        function renderCharacters() {
            const container = document.getElementById('charactersList');
            container.innerHTML = '';

            data.characters.forEach(character => {
                const card = document.createElement('div');
                card.className = 'item-card';
                card.innerHTML = `
                    <div class="item-header">
                        <div class="item-title">${character.name}</div>
                        <div class="item-actions">
                            <button class="btn btn-small" onclick="openModal('characterModal', ${character.id})">編輯</button>
                            <button class="btn btn-danger btn-small" onclick="deleteItem('characters', ${character.id})">刪除</button>
                        </div>
                    </div>
                    <div class="item-content">
                        ${character.age ? `<strong>年齡：</strong>${character.age}<br>` : ''}
                        ${character.appearance ? `<strong>外貌：</strong>${character.appearance}<br>` : ''}
                        ${character.personality ? `<strong>性格：</strong>${character.personality}<br>` : ''}
                        ${character.background ? `<strong>背景：</strong>${character.background.substring(0, 100)}${character.background.length > 100 ? '...' : ''}<br>` : ''}
                        ${character.notes ? `<strong>備註：</strong>${character.notes.substring(0, 100)}${character.notes.length > 100 ? '...' : ''}` : ''}
                    </div>
                    <div class="item-meta">
                        建立：${character.createdAt} | 更新：${character.updatedAt}
                    </div>
                `;
                container.appendChild(card);
            });
        }

        function renderBackgrounds() {
            const container = document.getElementById('backgroundsList');
            container.innerHTML = '';

            data.backgrounds.forEach(background => {
                const card = document.createElement('div');
                card.className = 'item-card';
                card.innerHTML = `
                    <div class="item-header">
                        <div class="item-title">${background.name} <span style="font-size: 14px; color: #718096;">[${background.type}]</span></div>
                        <div class="item-actions">
                            <button class="btn btn-small" onclick="openModal('backgroundModal', ${background.id})">編輯</button>
                            <button class="btn btn-danger btn-small" onclick="deleteItem('backgrounds', ${background.id})">刪除</button>
                        </div>
                    </div>
                    <div class="item-content">
                        ${background.description ? `<strong>描述：</strong>${background.description.substring(0, 150)}${background.description.length > 150 ? '...' : ''}<br>` : ''}
                        ${background.rules ? `<strong>規則：</strong>${background.rules.substring(0, 100)}${background.rules.length > 100 ? '...' : ''}<br>` : ''}
                        ${background.notes ? `<strong>備註：</strong>${background.notes.substring(0, 100)}${background.notes.length > 100 ? '...' : ''}` : ''}
                    </div>
                    <div class="item-meta">
                        建立：${background.createdAt} | 更新：${background.updatedAt}
                    </div>
                `;
                container.appendChild(card);
            });
        }

        function renderSecrets() {
            const container = document.getElementById('secretsList');
            container.innerHTML = '';

            data.secrets.forEach(secret => {
                const card = document.createElement('div');
                card.className = 'item-card';
                card.innerHTML = `
                    <div class="item-header">
                        <div class="item-title">🔐 ${secret.title} <span style="font-size: 14px; color: #718096;">[${secret.category}]</span></div>
                        <div class="item-actions">
                            <button class="btn btn-small" onclick="openModal('secretModal', ${secret.id})">編輯</button>
                            <button class="btn btn-danger btn-small" onclick="deleteItem('secrets', ${secret.id})">刪除</button>
                        </div>
                    </div>
                    <div class="item-content">
                        ${secret.content ? `<strong>內容：</strong>${secret.content.substring(0, 150)}${secret.content.length > 150 ? '...' : ''}<br>` : ''}
                        ${secret.impact ? `<strong>影響：</strong>${secret.impact.substring(0, 100)}${secret.impact.length > 100 ? '...' : ''}` : ''}
                    </div>
                    <div class="item-meta">
                        建立：${secret.createdAt} | 更新：${secret.updatedAt}
                    </div>
                `;
                container.appendChild(card);
            });
        }

        function renderNovels() {
            const container = document.getElementById('novelsList');
            container.innerHTML = '';

            data.novels.forEach(novel => {
                const card = document.createElement('div');
                card.className = 'item-card';
                card.innerHTML = `
                    <div class="item-header">
                        <div class="item-title">📖 ${novel.title}</div>
                        <div class="item-actions">
                            <button class="btn btn-small" onclick="openModal('novelModal', ${novel.id})">編輯</button>
                            <button class="btn btn-danger btn-small" onclick="deleteItem('novels', ${novel.id})">刪除</button>
                        </div>
                    </div>
                    <div class="item-content">
                        ${novel.prompt ? `<strong>提示詞：</strong>${novel.prompt.substring(0, 100)}${novel.prompt.length > 100 ? '...' : ''}<br>` : ''}
                        ${novel.content ? `<strong>內容：</strong>${novel.content.substring(0, 200)}${novel.content.length > 200 ? '...' : ''}<br>` : ''}
                        ${novel.notes ? `<strong>備註：</strong>${novel.notes.substring(0, 100)}${novel.notes.length > 100 ? '...' : ''}` : ''}
                    </div>
                    <div class="item-meta">
                        建立：${novel.createdAt} | 更新：${novel.updatedAt}
                    </div>
                `;
                container.appendChild(card);
            });
        }

        // 搜尋功能
        function searchItems(type) {
            const searchInput = document.getElementById(type.slice(0, -1) + 'Search');
            const searchTerm = searchInput.value.toLowerCase();
            const cards = document.querySelectorAll(`#${type}List .item-card`);
            
            cards.forEach(card => {
                const text = card.textContent.toLowerCase();
                if (text.includes(searchTerm)) {
                    card.style.display = 'block';
                } else {
                    card.style.display = 'none';
                }
            });
        }

        // 匯出功能
        function exportForAI() {
            const exportData = {
                角色設定: data.characters.map(c => ({
                    名稱: c.name,
                    年齡: c.age,
                    外貌: c.appearance,
                    性格: c.personality,
                    背景: c.background,
                    備註: c.notes
                })),
                故事背景: data.backgrounds.map(b => ({
                    名稱: b.name,
                    類型: b.type,
                    描述: b.description,
                    規則: b.rules,
                    備註: b.notes
                }))
            };

            const text = "=== 小說素材庫 ===\n\n" + JSON.stringify(exportData, null, 2);
            
            navigator.clipboard.writeText(text).then(() => {
                alert('已複製到剪貼簿！可以直接貼給AI使用');
            }).catch(() => {
                // 如果剪貼簿API失敗，顯示在新視窗
                const newWindow = window.open();
                newWindow.document.write(`<pre>${text}</pre>`);
            });
        }

        function exportAll() {
            const text = "=== 完整小說素材庫 ===\n\n" + JSON.stringify(data, null, 2);
            
            const blob = new Blob([text], { type: 'text/plain' });
            const url = URL.createObjectURL(blob);
            const a = document.createElement('a');
            a.href = url;
            a.download = '小說素材庫_' + new Date().toISOString().split('T')[0] + '.txt';
            a.click();
            URL.revokeObjectURL(url);
        }

        // 鍵盤快捷鍵
        document.addEventListener('keydown', function(e) {
            if (e.key === 'Escape') {
                // 關閉所有模態視窗
                document.querySelectorAll('.modal').forEach(modal => {
                    modal.style.display = 'none';
                });
            }
        });

        // 點擊模態背景關閉
        document.querySelectorAll('.modal').forEach(modal => {
            modal.addEventListener('click', function(e) {
                if (e.target === modal) {
                    modal.style.display = 'none';
                }
            });
        });

        // 初始載入
        window.addEventListener('load', function() {
            // 檢查是否已登入
            const isLoggedIn = localStorage.getItem('isLoggedIn');
            if (isLoggedIn === 'true') {
                document.getElementById('loginContainer').style.display = 'none';
                document.getElementById('mainApp').style.display = 'block';
                init();
            }
        });

        // 修改登入函數以記住登入狀態
        function login() {
            const password = document.getElementById('password').value;
            if (password === PASSWORD) {
                localStorage.setItem('isLoggedIn', 'true');
                document.getElementById('loginContainer').style.display = 'none';
                document.getElementById('mainApp').style.display = 'block';
                init();
            } else {
                alert('密碼錯誤！');
            }
        }

        // 修改登出函數
        function logout() {
            localStorage.removeItem('isLoggedIn');
            document.getElementById('loginContainer').style.display = 'flex';
            document.getElementById('mainApp').style.display = 'none';
            document.getElementById('password').value = '';
        }
    </script>
</body>
</html>
